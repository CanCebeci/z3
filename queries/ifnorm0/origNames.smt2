(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Expr () T@U)
(declare-fun |##_module.Expr.Const| () T@U)
(declare-fun |##_module.Expr.Var| () T@U)
(declare-fun |##_module.Expr.If| () T@U)
(declare-fun tytagFamily$Expr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Expr.If| (T@U T@U T@U) T@U)
(declare-fun Tclass._module.Expr () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Expr.Var| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Expr.cond (T@U) T@U)
(declare-fun _module.Expr.thn (T@U) T@U)
(declare-fun _module.Expr.els (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.FVs (T@U T@U) T@U)
(declare-fun |_module.__default.FVs#canCall| (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun _module.Expr.Const_q (T@U) Bool)
(declare-fun _module.Expr.Var_q (T@U) Bool)
(declare-fun _module.Expr.If_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |#_module.Expr.Const| (Bool) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun _module.Expr.name (T@U) T@U)
(declare-fun _module.Expr.value (T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet TagSeq alloc Tagclass._module.Expr |##_module.Expr.Const| |##_module.Expr.Var| |##_module.Expr.If| tytagFamily$Expr)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr)  (and (and ($Is DatatypeTypeType |a#14#0#0| Tclass._module.Expr) ($Is DatatypeTypeType |a#14#1#0| Tclass._module.Expr)) ($Is DatatypeTypeType |a#14#2#0| Tclass._module.Expr)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((|a#10#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#10#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#10#0#0| i))) (DtRank (|#_module.Expr.Var| |a#10#0#0|))))
 :pattern ( (|Seq#Index| |a#10#0#0| i) (|#_module.Expr.Var| |a#10#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|)) |##_module.Expr.If|)
 :pattern ( (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) ) (! (= (_module.Expr.cond (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) ) (! (= (_module.Expr.thn (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|)) |a#18#1#0|)
 :pattern ( (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (! (= (_module.Expr.els (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |a#20#2#0|)
 :pattern ( (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (= (Ctor SetType) 4))
(assert (forall (($ly T@U) (|e#0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0|) ($Is SetType (_module.__default.FVs $ly |e#0|) (TSet (TSeq TChar))))
 :pattern ( (_module.__default.FVs $ly |e#0|))
)))
(assert (forall ((d T@U) ) (! (= (_module.Expr.Const_q d) (= (DatatypeCtorId d) |##_module.Expr.Const|))
 :pattern ( (_module.Expr.Const_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Expr.Var_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Expr.Var|))
 :pattern ( (_module.Expr.Var_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Expr.If_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Expr.If|))
 :pattern ( (_module.Expr.If_q d@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Expr.If_q d@@2) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) ) (= d@@2 (|#_module.Expr.If| |a#13#0#0| |a#13#1#0| |a#13#2#0|))))
 :pattern ( (_module.Expr.If_q d@@2))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@4 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Expr.Const_q d@@3) (exists ((|a#1#0#0| Bool) ) (= d@@3 (|#_module.Expr.Const| |a#1#0#0|))))
 :pattern ( (_module.Expr.Const_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Expr.Var_q d@@4) (exists ((|a#6#0#0| T@U) ) (= d@@4 (|#_module.Expr.Var| |a#6#0#0|))))
 :pattern ( (_module.Expr.Var_q d@@4))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (= (Ctor SeqType) 5))
(assert (forall (($ly@@0 T@U) (|e#0@@0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| (Lit DatatypeTypeType |e#0@@0|)) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)))))) (let ((|els#3| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#3| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#3| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
 (and (and (|_module.__default.FVs#canCall| |cond#3|) (|_module.__default.FVs#canCall| |thn#3|)) (|_module.__default.FVs#canCall| |els#3|))))))) (= (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)) (ite (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)) |Set#Empty| (ite (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)) (let ((|name#2| (Lit SeqType (_module.Expr.name (Lit DatatypeTypeType |e#0@@0|)))))
(Lit SetType (|Set#UnionOne| |Set#Empty| ($Box SeqType |name#2|)))) (let ((|els#2| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#2| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#2| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
(|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $ly@@0) |cond#2|) (_module.__default.FVs ($LS $ly@@0) |thn#2|)) (_module.__default.FVs ($LS $ly@@0) |els#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Expr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Expr)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Expr))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert (forall ((|a#4#0#0| Bool) ) (! (= (_module.Expr.value (|#_module.Expr.Const| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Expr.Const| |a#4#0#0|))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@1 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) ) (! (= (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)) (Lit DatatypeTypeType (|#_module.Expr.If| |a#15#0#0| |a#15#1#0| |a#15#2#0|)))
 :pattern ( (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)))
)))
(assert (forall (($ly@@1 T@U) (|e#0@@1| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0@@1|) (and (=> (not (_module.Expr.Const_q |e#0@@1|)) (=> (not (_module.Expr.Var_q |e#0@@1|)) (let ((|els#1| (_module.Expr.els |e#0@@1|)))
(let ((|thn#1| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#1| (_module.Expr.cond |e#0@@1|)))
 (and (and (|_module.__default.FVs#canCall| |cond#1|) (|_module.__default.FVs#canCall| |thn#1|)) (|_module.__default.FVs#canCall| |els#1|))))))) (= (_module.__default.FVs ($LS $ly@@1) |e#0@@1|) (ite (_module.Expr.Const_q |e#0@@1|) |Set#Empty| (ite (_module.Expr.Var_q |e#0@@1|) (let ((|name#0| (_module.Expr.name |e#0@@1|)))
(|Set#UnionOne| |Set#Empty| ($Box SeqType |name#0|))) (let ((|els#0| (_module.Expr.els |e#0@@1|)))
(let ((|thn#0| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#0| (_module.Expr.cond |e#0@@1|)))
(|Set#Union| (|Set#Union| (_module.__default.FVs $ly@@1 |cond#0|) (_module.__default.FVs $ly@@1 |thn#0|)) (_module.__default.FVs $ly@@1 |els#0|))))))))))
 :pattern ( (_module.__default.FVs ($LS $ly@@1) |e#0@@1|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((|a#0#0#0| Bool) ) (! (= (DatatypeCtorId (|#_module.Expr.Const| |a#0#0#0|)) |##_module.Expr.Const|)
 :pattern ( (|#_module.Expr.Const| |a#0#0#0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.Var| |a#5#0#0|)) |##_module.Expr.Var|)
 :pattern ( (|#_module.Expr.Var| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (_module.Expr.name (|#_module.Expr.Var| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#_module.Expr.Var| |a#9#0#0|))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) ) (! (< (DtRank |a#17#0#0|) (DtRank (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (! (< (DtRank |a#19#1#0|) (DtRank (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (! (< (DtRank |a#21#2#0|) (DtRank (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|))
)))
(assert (forall (($ly@@2 T@U) (|e#0@@2| T@U) ) (! (= (_module.__default.FVs ($LS $ly@@2) |e#0@@2|) (_module.__default.FVs $ly@@2 |e#0@@2|))
 :pattern ( (_module.__default.FVs ($LS $ly@@2) |e#0@@2|))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (! (= (|Set#Union| a@@10 (|Set#Union| a@@10 b@@7)) (|Set#Union| a@@10 b@@7))
 :pattern ( (|Set#Union| a@@10 (|Set#Union| a@@10 b@@7)))
)))
(assert (forall ((|a#2#0#0| Bool) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr) ($Is boolType (bool_2_U |a#2#0#0|) TBool))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (|Seq#Rank| |a#11#0#0|) (DtRank (|#_module.Expr.Var| |a#11#0#0|)))
 :pattern ( (|#_module.Expr.Var| |a#11#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Expr.Const_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.Expr $h))) ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@5)) TBool $h))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@5)) TBool $h))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 Tclass._module.Expr) (or (or (_module.Expr.Const_q d@@6) (_module.Expr.Var_q d@@6)) (_module.Expr.If_q d@@6)))
 :pattern ( (_module.Expr.If_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.Expr))
 :pattern ( (_module.Expr.Var_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.Expr))
 :pattern ( (_module.Expr.Const_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.Expr))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (forall ((bx@@5 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@5 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@5)) bx@@5) ($Is SeqType ($Unbox SeqType bx@@5) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@5 (TSeq t@@6)))
)))
(assert (forall ((d@@7 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@7 Tclass._module.Expr)) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Expr $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Expr $h@@0))
)))
(assert (= (Tag Tclass._module.Expr) Tagclass._module.Expr))
(assert (= (TagFamily Tclass._module.Expr) tytagFamily$Expr))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr) ($Is SeqType |a#7#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr))
)))
(assert (forall ((d@@8 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Expr.Var_q d@@8) ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Expr $h@@1))) ($IsAlloc SeqType (_module.Expr.name d@@8) (TSeq TChar) $h@@1))
 :pattern ( ($IsAlloc SeqType (_module.Expr.name d@@8) (TSeq TChar) $h@@1))
)))
(assert (forall ((d@@9 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Expr.If_q d@@9) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Expr $h@@2))) ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@9) Tclass._module.Expr $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@9) Tclass._module.Expr $h@@2))
)))
(assert (forall ((d@@10 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Expr.If_q d@@10) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.Expr $h@@3))) ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@10) Tclass._module.Expr $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@10) Tclass._module.Expr $h@@3))
)))
(assert (forall ((d@@11 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Expr.If_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Expr $h@@4))) ($IsAlloc DatatypeTypeType (_module.Expr.els d@@11) Tclass._module.Expr $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.els d@@11) Tclass._module.Expr $h@@4))
)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))) (Lit DatatypeTypeType (|#_module.Expr.Const| (U_2_bool |a#3#0#0|))))
 :pattern ( (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)) (Lit DatatypeTypeType (|#_module.Expr.Var| |a#8#0#0|)))
 :pattern ( (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@2)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc charType v@@5 TChar h@@3)
 :pattern ( ($IsAlloc charType v@@5 TChar h@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((s@@1 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is charType v@@8 TChar)
 :pattern ( ($Is charType v@@8 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |e#0@@3| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun |_mcc#3#0| () T@U)
(declare-fun |_mcc#4#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |els#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |thn#Z#0@0| () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |cond#Z#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |_mcc#0#0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 0)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let ((anon12_Else_correct true))
(let ((anon12_Then_correct  (=> (and (= |e#0@@3| (|#_module.Expr.If| |_mcc#2#0| |_mcc#3#0| |_mcc#4#0|)) ($Is DatatypeTypeType |_mcc#2#0| Tclass._module.Expr)) (=> (and (and ($Is DatatypeTypeType |_mcc#3#0| Tclass._module.Expr) ($Is DatatypeTypeType |_mcc#4#0| Tclass._module.Expr)) (and (= |let#0#0#0| |_mcc#4#0|) ($Is DatatypeTypeType |let#0#0#0| Tclass._module.Expr))) (=> (and (and (and (= |els#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |_mcc#3#0|)) (and ($Is DatatypeTypeType |let#1#0#0| Tclass._module.Expr) (= |thn#Z#0@0| |let#1#0#0|))) (and (and (= |let#2#0#0| |_mcc#2#0|) ($Is DatatypeTypeType |let#2#0#0| Tclass._module.Expr)) (and (= |cond#Z#0@0| |let#2#0#0|) ($IsAlloc DatatypeTypeType |cond#Z#0@0| Tclass._module.Expr $Heap)))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (< (DtRank |cond#Z#0@0|) (DtRank |e#0@@3|))) (=> (< (DtRank |cond#Z#0@0|) (DtRank |e#0@@3|)) (=> (and (|_module.__default.FVs#canCall| |cond#Z#0@0|) ($IsAlloc DatatypeTypeType |thn#Z#0@0| Tclass._module.Expr $Heap)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (< (DtRank |thn#Z#0@0|) (DtRank |e#0@@3|))) (=> (< (DtRank |thn#Z#0@0|) (DtRank |e#0@@3|)) (=> (|_module.__default.FVs#canCall| |thn#Z#0@0|) (=> (and ($IsAlloc DatatypeTypeType |els#Z#0@0| Tclass._module.Expr $Heap) (= (ControlFlow 0 5) (- 0 4))) (< (DtRank |els#Z#0@0|) (DtRank |e#0@@3|))))))))))))))
(let ((anon11_Else_correct  (=> (or (not (= |e#0@@3| (|#_module.Expr.Var| |_mcc#1#0|))) (not true)) (and (=> (= (ControlFlow 0 9) 5) anon12_Then_correct) (=> (= (ControlFlow 0 9) 8) anon12_Else_correct)))))
(let ((anon11_Then_correct true))
(let ((anon10_Else_correct  (=> (or (not (= |e#0@@3| (|#_module.Expr.Const| |_mcc#0#0|))) (not true)) (and (=> (= (ControlFlow 0 10) 3) anon11_Then_correct) (=> (= (ControlFlow 0 10) 9) anon11_Else_correct)))))
(let ((anon10_Then_correct true))
(let ((anon9_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 11) 1) anon9_Then_correct) (=> (= (ControlFlow 0 11) 2) anon10_Then_correct)) (=> (= (ControlFlow 0 11) 10) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is DatatypeTypeType |e#0@@3| Tclass._module.Expr) (= (ControlFlow 0 12) 11))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Expr () T@U)
(declare-fun |##_module.Expr.Const| () T@U)
(declare-fun |##_module.Expr.Var| () T@U)
(declare-fun |##_module.Expr.If| () T@U)
(declare-fun tytagFamily$Expr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Expr.If| (T@U T@U T@U) T@U)
(declare-fun Tclass._module.Expr () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Expr.Var| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Expr.cond (T@U) T@U)
(declare-fun _module.Expr.thn (T@U) T@U)
(declare-fun _module.Expr.els (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.FVs (T@U T@U) T@U)
(declare-fun |_module.__default.FVs#canCall| (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun _module.Expr.Const_q (T@U) Bool)
(declare-fun _module.Expr.Var_q (T@U) Bool)
(declare-fun _module.Expr.If_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |#_module.Expr.Const| (Bool) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun _module.Expr.name (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.Expr.value (T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |$IsA#_module.Expr| (T@U) Bool)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet TagSeq alloc Tagclass._module.Expr |##_module.Expr.Const| |##_module.Expr.Var| |##_module.Expr.If| tytagFamily$Expr)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr)  (and (and ($Is DatatypeTypeType |a#14#0#0| Tclass._module.Expr) ($Is DatatypeTypeType |a#14#1#0| Tclass._module.Expr)) ($Is DatatypeTypeType |a#14#2#0| Tclass._module.Expr)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((|a#10#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#10#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#10#0#0| i))) (DtRank (|#_module.Expr.Var| |a#10#0#0|))))
 :pattern ( (|Seq#Index| |a#10#0#0| i) (|#_module.Expr.Var| |a#10#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|)) |##_module.Expr.If|)
 :pattern ( (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) ) (! (= (_module.Expr.cond (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) ) (! (= (_module.Expr.thn (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|)) |a#18#1#0|)
 :pattern ( (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (! (= (_module.Expr.els (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |a#20#2#0|)
 :pattern ( (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (= (Ctor SetType) 4))
(assert (forall (($ly T@U) (|e#0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0|) ($Is SetType (_module.__default.FVs $ly |e#0|) (TSet (TSeq TChar))))
 :pattern ( (_module.__default.FVs $ly |e#0|))
)))
(assert (forall ((d T@U) ) (! (= (_module.Expr.Const_q d) (= (DatatypeCtorId d) |##_module.Expr.Const|))
 :pattern ( (_module.Expr.Const_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Expr.Var_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Expr.Var|))
 :pattern ( (_module.Expr.Var_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Expr.If_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Expr.If|))
 :pattern ( (_module.Expr.If_q d@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Expr.If_q d@@2) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) ) (= d@@2 (|#_module.Expr.If| |a#13#0#0| |a#13#1#0| |a#13#2#0|))))
 :pattern ( (_module.Expr.If_q d@@2))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@4 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Expr.Const_q d@@3) (exists ((|a#1#0#0| Bool) ) (= d@@3 (|#_module.Expr.Const| |a#1#0#0|))))
 :pattern ( (_module.Expr.Const_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Expr.Var_q d@@4) (exists ((|a#6#0#0| T@U) ) (= d@@4 (|#_module.Expr.Var| |a#6#0#0|))))
 :pattern ( (_module.Expr.Var_q d@@4))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (= (Ctor SeqType) 5))
(assert (forall (($ly@@0 T@U) (|e#0@@0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| (Lit DatatypeTypeType |e#0@@0|)) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)))))) (let ((|els#3| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#3| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#3| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
 (and (and (|_module.__default.FVs#canCall| |cond#3|) (|_module.__default.FVs#canCall| |thn#3|)) (|_module.__default.FVs#canCall| |els#3|))))))) (= (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)) (ite (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)) |Set#Empty| (ite (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)) (let ((|name#2| (Lit SeqType (_module.Expr.name (Lit DatatypeTypeType |e#0@@0|)))))
(Lit SetType (|Set#UnionOne| |Set#Empty| ($Box SeqType |name#2|)))) (let ((|els#2| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#2| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#2| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
(|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $ly@@0) |cond#2|) (_module.__default.FVs ($LS $ly@@0) |thn#2|)) (_module.__default.FVs ($LS $ly@@0) |els#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Expr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Expr)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Expr))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@7) (= a@@10 b@@7))
 :pattern ( (|Set#Equal| a@@10 b@@7))
)))
(assert (forall ((|a#4#0#0| Bool) ) (! (= (_module.Expr.value (|#_module.Expr.Const| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Expr.Const| |a#4#0#0|))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@1 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) ) (! (= (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)) (Lit DatatypeTypeType (|#_module.Expr.If| |a#15#0#0| |a#15#1#0| |a#15#2#0|)))
 :pattern ( (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)))
)))
(assert (forall (($ly@@1 T@U) (|e#0@@1| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0@@1|) (and (=> (not (_module.Expr.Const_q |e#0@@1|)) (=> (not (_module.Expr.Var_q |e#0@@1|)) (let ((|els#1| (_module.Expr.els |e#0@@1|)))
(let ((|thn#1| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#1| (_module.Expr.cond |e#0@@1|)))
 (and (and (|_module.__default.FVs#canCall| |cond#1|) (|_module.__default.FVs#canCall| |thn#1|)) (|_module.__default.FVs#canCall| |els#1|))))))) (= (_module.__default.FVs ($LS $ly@@1) |e#0@@1|) (ite (_module.Expr.Const_q |e#0@@1|) |Set#Empty| (ite (_module.Expr.Var_q |e#0@@1|) (let ((|name#0| (_module.Expr.name |e#0@@1|)))
(|Set#UnionOne| |Set#Empty| ($Box SeqType |name#0|))) (let ((|els#0| (_module.Expr.els |e#0@@1|)))
(let ((|thn#0| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#0| (_module.Expr.cond |e#0@@1|)))
(|Set#Union| (|Set#Union| (_module.__default.FVs $ly@@1 |cond#0|) (_module.__default.FVs $ly@@1 |thn#0|)) (_module.__default.FVs $ly@@1 |els#0|))))))))))
 :pattern ( (_module.__default.FVs ($LS $ly@@1) |e#0@@1|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((|a#0#0#0| Bool) ) (! (= (DatatypeCtorId (|#_module.Expr.Const| |a#0#0#0|)) |##_module.Expr.Const|)
 :pattern ( (|#_module.Expr.Const| |a#0#0#0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.Var| |a#5#0#0|)) |##_module.Expr.Var|)
 :pattern ( (|#_module.Expr.Var| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (_module.Expr.name (|#_module.Expr.Var| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#_module.Expr.Var| |a#9#0#0|))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) ) (! (< (DtRank |a#17#0#0|) (DtRank (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (! (< (DtRank |a#19#1#0|) (DtRank (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (! (< (DtRank |a#21#2#0|) (DtRank (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (|$IsA#_module.Expr| d@@5) (or (or (_module.Expr.Const_q d@@5) (_module.Expr.Var_q d@@5)) (_module.Expr.If_q d@@5)))
 :pattern ( (|$IsA#_module.Expr| d@@5))
)))
(assert (forall (($ly@@2 T@U) (|e#0@@2| T@U) ) (! (= (_module.__default.FVs ($LS $ly@@2) |e#0@@2|) (_module.__default.FVs $ly@@2 |e#0@@2|))
 :pattern ( (_module.__default.FVs ($LS $ly@@2) |e#0@@2|))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)) (|Set#Union| a@@11 b@@8))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)))
)))
(assert (forall ((|a#2#0#0| Bool) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr) ($Is boolType (bool_2_U |a#2#0#0|) TBool))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (|Seq#Rank| |a#11#0#0|) (DtRank (|#_module.Expr.Var| |a#11#0#0|)))
 :pattern ( (|#_module.Expr.Var| |a#11#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Expr.Const_q d@@6) ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Expr $h))) ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@6)) TBool $h))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@6)) TBool $h))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 Tclass._module.Expr) (or (or (_module.Expr.Const_q d@@7) (_module.Expr.Var_q d@@7)) (_module.Expr.If_q d@@7)))
 :pattern ( (_module.Expr.If_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
 :pattern ( (_module.Expr.Var_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
 :pattern ( (_module.Expr.Const_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (forall ((bx@@5 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@5 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@5)) bx@@5) ($Is SeqType ($Unbox SeqType bx@@5) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@5 (TSeq t@@6)))
)))
(assert (forall ((d@@8 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@8 Tclass._module.Expr)) ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Expr $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Expr $h@@0))
)))
(assert (= (Tag Tclass._module.Expr) Tagclass._module.Expr))
(assert (= (TagFamily Tclass._module.Expr) tytagFamily$Expr))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr) ($Is SeqType |a#7#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr))
)))
(assert (forall ((d@@9 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Expr.Var_q d@@9) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Expr $h@@1))) ($IsAlloc SeqType (_module.Expr.name d@@9) (TSeq TChar) $h@@1))
 :pattern ( ($IsAlloc SeqType (_module.Expr.name d@@9) (TSeq TChar) $h@@1))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Equal| a@@12 b@@9) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@12 o@@4) (|Set#IsMember| b@@9 o@@4))
 :pattern ( (|Set#IsMember| a@@12 o@@4))
 :pattern ( (|Set#IsMember| b@@9 o@@4))
)))
 :pattern ( (|Set#Equal| a@@12 b@@9))
)))
(assert (forall ((d@@10 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Expr.If_q d@@10) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.Expr $h@@2))) ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@10) Tclass._module.Expr $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@10) Tclass._module.Expr $h@@2))
)))
(assert (forall ((d@@11 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Expr.If_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Expr $h@@3))) ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@11) Tclass._module.Expr $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@11) Tclass._module.Expr $h@@3))
)))
(assert (forall ((d@@12 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Expr.If_q d@@12) ($IsAlloc DatatypeTypeType d@@12 Tclass._module.Expr $h@@4))) ($IsAlloc DatatypeTypeType (_module.Expr.els d@@12) Tclass._module.Expr $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.els d@@12) Tclass._module.Expr $h@@4))
)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))) (Lit DatatypeTypeType (|#_module.Expr.Const| (U_2_bool |a#3#0#0|))))
 :pattern ( (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)) (Lit DatatypeTypeType (|#_module.Expr.Var| |a#8#0#0|)))
 :pattern ( (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@2)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc charType v@@5 TChar h@@3)
 :pattern ( ($IsAlloc charType v@@5 TChar h@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((s@@1 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is charType v@@8 TChar)
 :pattern ( ($Is charType v@@8 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |g#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |b#0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $LZ () T@U)
(set-option :timeout 0)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (|$IsA#_module.Expr| |g#0|)) (and (|$IsA#_module.Expr| |a#0|) (|$IsA#_module.Expr| |b#0|))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#g0#0| T@U) (|$ih#a0#0| T@U) (|$ih#b0#0| T@U) ) (!  (=> (and (and (and (and ($Is DatatypeTypeType |$ih#g0#0| Tclass._module.Expr) ($Is DatatypeTypeType |$ih#a0#0| Tclass._module.Expr)) ($Is DatatypeTypeType |$ih#b0#0| Tclass._module.Expr)) (U_2_bool (Lit boolType (bool_2_U true)))) (or (< (DtRank |$ih#g0#0|) (DtRank |g#0|)) (and (= (DtRank |$ih#g0#0|) (DtRank |g#0|)) (or (< (DtRank |$ih#a0#0|) (DtRank |a#0|)) (and (= (DtRank |$ih#a0#0|) (DtRank |a#0|)) (< (DtRank |$ih#b0#0|) (DtRank |b#0|))))))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |$ih#g0#0| |$ih#a0#0| |$ih#b0#0|)) (and (and (|_module.__default.FVs#canCall| |$ih#g0#0|) (|_module.__default.FVs#canCall| |$ih#a0#0|)) (|_module.__default.FVs#canCall| |$ih#b0#0|))) (|Set#Equal| (_module.__default.FVs ($LS $LZ) (|#_module.Expr.If| |$ih#g0#0| |$ih#a0#0| |$ih#b0#0|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |$ih#g0#0|) (_module.__default.FVs ($LS $LZ) |$ih#a0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#b0#0|)))))
 :pattern ( (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |$ih#g0#0|) (_module.__default.FVs ($LS $LZ) |$ih#a0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#b0#0|)))
 :pattern ( (|#_module.Expr.If| |$ih#g0#0| |$ih#a0#0| |$ih#b0#0|))
)))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0| |a#0| |b#0|)) (and (and (|_module.__default.FVs#canCall| |g#0|) (|_module.__default.FVs#canCall| |a#0|)) (|_module.__default.FVs#canCall| |b#0|))) (= (ControlFlow 0 2) (- 0 1)))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0| |a#0| |b#0|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0|)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and ($Is DatatypeTypeType |g#0| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |g#0| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |g#0|)) (and (and ($Is DatatypeTypeType |a#0| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |a#0| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |a#0|))) (and (and (and ($Is DatatypeTypeType |b#0| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |b#0| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |b#0|)) (= (ControlFlow 0 3) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Expr () T@U)
(declare-fun |##_module.Expr.Const| () T@U)
(declare-fun |##_module.Expr.Var| () T@U)
(declare-fun |##_module.Expr.If| () T@U)
(declare-fun tytagFamily$Expr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Expr.If| (T@U T@U T@U) T@U)
(declare-fun Tclass._module.Expr () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Expr.Var| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Expr.cond (T@U) T@U)
(declare-fun _module.Expr.thn (T@U) T@U)
(declare-fun _module.Expr.els (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun _module.__default.NestedIf (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.NestedIf#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.UnnestedIf (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.UnnestedIf#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun _module.__default.FVs (T@U T@U) T@U)
(declare-fun |_module.__default.FVs#canCall| (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun _module.Expr.Const_q (T@U) Bool)
(declare-fun _module.Expr.Var_q (T@U) Bool)
(declare-fun _module.Expr.If_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |#_module.Expr.Const| (Bool) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun _module.Expr.name (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.Expr.value (T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |$IsA#_module.Expr| (T@U) Bool)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet TagSeq alloc Tagclass._module.Expr |##_module.Expr.Const| |##_module.Expr.Var| |##_module.Expr.If| tytagFamily$Expr)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr)  (and (and ($Is DatatypeTypeType |a#14#0#0| Tclass._module.Expr) ($Is DatatypeTypeType |a#14#1#0| Tclass._module.Expr)) ($Is DatatypeTypeType |a#14#2#0| Tclass._module.Expr)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.If| |a#14#0#0| |a#14#1#0| |a#14#2#0|) Tclass._module.Expr))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((|a#10#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#10#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#10#0#0| i))) (DtRank (|#_module.Expr.Var| |a#10#0#0|))))
 :pattern ( (|Seq#Index| |a#10#0#0| i) (|#_module.Expr.Var| |a#10#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|)) |##_module.Expr.If|)
 :pattern ( (|#_module.Expr.If| |a#12#0#0| |a#12#1#0| |a#12#2#0|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) ) (! (= (_module.Expr.cond (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Expr.If| |a#16#0#0| |a#16#1#0| |a#16#2#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) ) (! (= (_module.Expr.thn (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|)) |a#18#1#0|)
 :pattern ( (|#_module.Expr.If| |a#18#0#0| |a#18#1#0| |a#18#2#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (! (= (_module.Expr.els (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |a#20#2#0|)
 :pattern ( (|#_module.Expr.If| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((|g#0| T@U) (|a#0| T@U) (|b#0| T@U) (|x#0| T@U) (|y#0| T@U) ) (!  (=> (|_module.__default.NestedIf#canCall| |g#0| |a#0| |b#0| |x#0| |y#0|) (= (_module.__default.NestedIf |g#0| |a#0| |b#0| |x#0| |y#0|) (|#_module.Expr.If| (|#_module.Expr.If| |g#0| |a#0| |b#0|) |x#0| |y#0|)))
 :pattern ( (_module.__default.NestedIf |g#0| |a#0| |b#0| |x#0| |y#0|))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((|g#0@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) (|x#0@@0| T@U) (|y#0@@0| T@U) ) (!  (=> (|_module.__default.UnnestedIf#canCall| |g#0@@0| |a#0@@0| |b#0@@0| |x#0@@0| |y#0@@0|) (= (_module.__default.UnnestedIf |g#0@@0| |a#0@@0| |b#0@@0| |x#0@@0| |y#0@@0|) (|#_module.Expr.If| |g#0@@0| (|#_module.Expr.If| |a#0@@0| |x#0@@0| |y#0@@0|) (|#_module.Expr.If| |b#0@@0| |x#0@@0| |y#0@@0|))))
 :pattern ( (_module.__default.UnnestedIf |g#0@@0| |a#0@@0| |b#0@@0| |x#0@@0| |y#0@@0|))
)))
(assert (forall ((|g#0@@1| T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) (|x#0@@1| T@U) (|y#0@@1| T@U) ) (!  (=> (|_module.__default.NestedIf#canCall| (Lit DatatypeTypeType |g#0@@1|) (Lit DatatypeTypeType |a#0@@1|) (Lit DatatypeTypeType |b#0@@1|) (Lit DatatypeTypeType |x#0@@1|) (Lit DatatypeTypeType |y#0@@1|)) (= (_module.__default.NestedIf (Lit DatatypeTypeType |g#0@@1|) (Lit DatatypeTypeType |a#0@@1|) (Lit DatatypeTypeType |b#0@@1|) (Lit DatatypeTypeType |x#0@@1|) (Lit DatatypeTypeType |y#0@@1|)) (Lit DatatypeTypeType (|#_module.Expr.If| (Lit DatatypeTypeType (|#_module.Expr.If| (Lit DatatypeTypeType |g#0@@1|) (Lit DatatypeTypeType |a#0@@1|) (Lit DatatypeTypeType |b#0@@1|))) (Lit DatatypeTypeType |x#0@@1|) (Lit DatatypeTypeType |y#0@@1|)))))
 :weight 3
 :pattern ( (_module.__default.NestedIf (Lit DatatypeTypeType |g#0@@1|) (Lit DatatypeTypeType |a#0@@1|) (Lit DatatypeTypeType |b#0@@1|) (Lit DatatypeTypeType |x#0@@1|) (Lit DatatypeTypeType |y#0@@1|)))
)))
(assert (= (Ctor SetType) 4))
(assert (forall (($ly T@U) (|e#0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0|) ($Is SetType (_module.__default.FVs $ly |e#0|) (TSet (TSeq TChar))))
 :pattern ( (_module.__default.FVs $ly |e#0|))
)))
(assert (forall ((|g#0@@2| T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) (|x#0@@2| T@U) (|y#0@@2| T@U) ) (!  (=> (|_module.__default.UnnestedIf#canCall| (Lit DatatypeTypeType |g#0@@2|) (Lit DatatypeTypeType |a#0@@2|) (Lit DatatypeTypeType |b#0@@2|) (Lit DatatypeTypeType |x#0@@2|) (Lit DatatypeTypeType |y#0@@2|)) (= (_module.__default.UnnestedIf (Lit DatatypeTypeType |g#0@@2|) (Lit DatatypeTypeType |a#0@@2|) (Lit DatatypeTypeType |b#0@@2|) (Lit DatatypeTypeType |x#0@@2|) (Lit DatatypeTypeType |y#0@@2|)) (Lit DatatypeTypeType (|#_module.Expr.If| (Lit DatatypeTypeType |g#0@@2|) (Lit DatatypeTypeType (|#_module.Expr.If| (Lit DatatypeTypeType |a#0@@2|) (Lit DatatypeTypeType |x#0@@2|) (Lit DatatypeTypeType |y#0@@2|))) (Lit DatatypeTypeType (|#_module.Expr.If| (Lit DatatypeTypeType |b#0@@2|) (Lit DatatypeTypeType |x#0@@2|) (Lit DatatypeTypeType |y#0@@2|)))))))
 :weight 3
 :pattern ( (_module.__default.UnnestedIf (Lit DatatypeTypeType |g#0@@2|) (Lit DatatypeTypeType |a#0@@2|) (Lit DatatypeTypeType |b#0@@2|) (Lit DatatypeTypeType |x#0@@2|) (Lit DatatypeTypeType |y#0@@2|)))
)))
(assert (forall ((d T@U) ) (! (= (_module.Expr.Const_q d) (= (DatatypeCtorId d) |##_module.Expr.Const|))
 :pattern ( (_module.Expr.Const_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Expr.Var_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Expr.Var|))
 :pattern ( (_module.Expr.Var_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Expr.If_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Expr.If|))
 :pattern ( (_module.Expr.If_q d@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Expr.If_q d@@2) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) ) (= d@@2 (|#_module.Expr.If| |a#13#0#0| |a#13#1#0| |a#13#2#0|))))
 :pattern ( (_module.Expr.If_q d@@2))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@4 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Expr.Const_q d@@3) (exists ((|a#1#0#0| Bool) ) (= d@@3 (|#_module.Expr.Const| |a#1#0#0|))))
 :pattern ( (_module.Expr.Const_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Expr.Var_q d@@4) (exists ((|a#6#0#0| T@U) ) (= d@@4 (|#_module.Expr.Var| |a#6#0#0|))))
 :pattern ( (_module.Expr.Var_q d@@4))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (= (Ctor SeqType) 5))
(assert (forall (($ly@@0 T@U) (|e#0@@0| T@U) ) (!  (=> (|_module.__default.FVs#canCall| (Lit DatatypeTypeType |e#0@@0|)) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)))))) (let ((|els#3| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#3| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#3| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
 (and (and (|_module.__default.FVs#canCall| |cond#3|) (|_module.__default.FVs#canCall| |thn#3|)) (|_module.__default.FVs#canCall| |els#3|))))))) (= (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)) (ite (_module.Expr.Const_q (Lit DatatypeTypeType |e#0@@0|)) |Set#Empty| (ite (_module.Expr.Var_q (Lit DatatypeTypeType |e#0@@0|)) (let ((|name#2| (Lit SeqType (_module.Expr.name (Lit DatatypeTypeType |e#0@@0|)))))
(Lit SetType (|Set#UnionOne| |Set#Empty| ($Box SeqType |name#2|)))) (let ((|els#2| (Lit DatatypeTypeType (_module.Expr.els (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|thn#2| (Lit DatatypeTypeType (_module.Expr.thn (Lit DatatypeTypeType |e#0@@0|)))))
(let ((|cond#2| (Lit DatatypeTypeType (_module.Expr.cond (Lit DatatypeTypeType |e#0@@0|)))))
(|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $ly@@0) |cond#2|) (_module.__default.FVs ($LS $ly@@0) |thn#2|)) (_module.__default.FVs ($LS $ly@@0) |els#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.FVs ($LS $ly@@0) (Lit DatatypeTypeType |e#0@@0|)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Expr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Expr)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Expr))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@7) (= a@@10 b@@7))
 :pattern ( (|Set#Equal| a@@10 b@@7))
)))
(assert (forall ((|a#4#0#0| Bool) ) (! (= (_module.Expr.value (|#_module.Expr.Const| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Expr.Const| |a#4#0#0|))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@1 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) ) (! (= (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)) (Lit DatatypeTypeType (|#_module.Expr.If| |a#15#0#0| |a#15#1#0| |a#15#2#0|)))
 :pattern ( (|#_module.Expr.If| (Lit DatatypeTypeType |a#15#0#0|) (Lit DatatypeTypeType |a#15#1#0|) (Lit DatatypeTypeType |a#15#2#0|)))
)))
(assert (forall (($ly@@1 T@U) (|e#0@@1| T@U) ) (!  (=> (|_module.__default.FVs#canCall| |e#0@@1|) (and (=> (not (_module.Expr.Const_q |e#0@@1|)) (=> (not (_module.Expr.Var_q |e#0@@1|)) (let ((|els#1| (_module.Expr.els |e#0@@1|)))
(let ((|thn#1| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#1| (_module.Expr.cond |e#0@@1|)))
 (and (and (|_module.__default.FVs#canCall| |cond#1|) (|_module.__default.FVs#canCall| |thn#1|)) (|_module.__default.FVs#canCall| |els#1|))))))) (= (_module.__default.FVs ($LS $ly@@1) |e#0@@1|) (ite (_module.Expr.Const_q |e#0@@1|) |Set#Empty| (ite (_module.Expr.Var_q |e#0@@1|) (let ((|name#0| (_module.Expr.name |e#0@@1|)))
(|Set#UnionOne| |Set#Empty| ($Box SeqType |name#0|))) (let ((|els#0| (_module.Expr.els |e#0@@1|)))
(let ((|thn#0| (_module.Expr.thn |e#0@@1|)))
(let ((|cond#0| (_module.Expr.cond |e#0@@1|)))
(|Set#Union| (|Set#Union| (_module.__default.FVs $ly@@1 |cond#0|) (_module.__default.FVs $ly@@1 |thn#0|)) (_module.__default.FVs $ly@@1 |els#0|))))))))))
 :pattern ( (_module.__default.FVs ($LS $ly@@1) |e#0@@1|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((|a#0#0#0| Bool) ) (! (= (DatatypeCtorId (|#_module.Expr.Const| |a#0#0#0|)) |##_module.Expr.Const|)
 :pattern ( (|#_module.Expr.Const| |a#0#0#0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expr.Var| |a#5#0#0|)) |##_module.Expr.Var|)
 :pattern ( (|#_module.Expr.Var| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (_module.Expr.name (|#_module.Expr.Var| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#_module.Expr.Var| |a#9#0#0|))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) ) (! (< (DtRank |a#17#0#0|) (DtRank (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#17#0#0| |a#17#1#0| |a#17#2#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (! (< (DtRank |a#19#1#0|) (DtRank (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#19#0#0| |a#19#1#0| |a#19#2#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (! (< (DtRank |a#21#2#0|) (DtRank (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|)))
 :pattern ( (|#_module.Expr.If| |a#21#0#0| |a#21#1#0| |a#21#2#0|))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (|$IsA#_module.Expr| d@@5) (or (or (_module.Expr.Const_q d@@5) (_module.Expr.Var_q d@@5)) (_module.Expr.If_q d@@5)))
 :pattern ( (|$IsA#_module.Expr| d@@5))
)))
(assert (forall (($ly@@2 T@U) (|e#0@@2| T@U) ) (! (= (_module.__default.FVs ($LS $ly@@2) |e#0@@2|) (_module.__default.FVs $ly@@2 |e#0@@2|))
 :pattern ( (_module.__default.FVs ($LS $ly@@2) |e#0@@2|))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)) (|Set#Union| a@@11 b@@8))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)))
)))
(assert (forall ((|a#2#0#0| Bool) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr) ($Is boolType (bool_2_U |a#2#0#0|) TBool))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Const| |a#2#0#0|) Tclass._module.Expr))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (|Seq#Rank| |a#11#0#0|) (DtRank (|#_module.Expr.Var| |a#11#0#0|)))
 :pattern ( (|#_module.Expr.Var| |a#11#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Expr.Const_q d@@6) ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Expr $h))) ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@6)) TBool $h))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Expr.value d@@6)) TBool $h))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 Tclass._module.Expr) (or (or (_module.Expr.Const_q d@@7) (_module.Expr.Var_q d@@7)) (_module.Expr.If_q d@@7)))
 :pattern ( (_module.Expr.If_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
 :pattern ( (_module.Expr.Var_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
 :pattern ( (_module.Expr.Const_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Expr))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (forall ((bx@@5 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@5 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@5)) bx@@5) ($Is SeqType ($Unbox SeqType bx@@5) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@5 (TSeq t@@6)))
)))
(assert (forall ((|g#0@@3| T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) (|x#0@@3| T@U) (|y#0@@3| T@U) ) (!  (=> (|_module.__default.NestedIf#canCall| |g#0@@3| |a#0@@3| |b#0@@3| |x#0@@3| |y#0@@3|) ($Is DatatypeTypeType (_module.__default.NestedIf |g#0@@3| |a#0@@3| |b#0@@3| |x#0@@3| |y#0@@3|) Tclass._module.Expr))
 :pattern ( (_module.__default.NestedIf |g#0@@3| |a#0@@3| |b#0@@3| |x#0@@3| |y#0@@3|))
)))
(assert (forall ((|g#0@@4| T@U) (|a#0@@4| T@U) (|b#0@@4| T@U) (|x#0@@4| T@U) (|y#0@@4| T@U) ) (!  (=> (|_module.__default.UnnestedIf#canCall| |g#0@@4| |a#0@@4| |b#0@@4| |x#0@@4| |y#0@@4|) ($Is DatatypeTypeType (_module.__default.UnnestedIf |g#0@@4| |a#0@@4| |b#0@@4| |x#0@@4| |y#0@@4|) Tclass._module.Expr))
 :pattern ( (_module.__default.UnnestedIf |g#0@@4| |a#0@@4| |b#0@@4| |x#0@@4| |y#0@@4|))
)))
(assert (forall ((d@@8 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@8 Tclass._module.Expr)) ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Expr $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Expr $h@@0))
)))
(assert (= (Tag Tclass._module.Expr) Tagclass._module.Expr))
(assert (= (TagFamily Tclass._module.Expr) tytagFamily$Expr))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr) ($Is SeqType |a#7#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expr.Var| |a#7#0#0|) Tclass._module.Expr))
)))
(assert (forall ((d@@9 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Expr.Var_q d@@9) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Expr $h@@1))) ($IsAlloc SeqType (_module.Expr.name d@@9) (TSeq TChar) $h@@1))
 :pattern ( ($IsAlloc SeqType (_module.Expr.name d@@9) (TSeq TChar) $h@@1))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Equal| a@@12 b@@9) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@12 o@@4) (|Set#IsMember| b@@9 o@@4))
 :pattern ( (|Set#IsMember| a@@12 o@@4))
 :pattern ( (|Set#IsMember| b@@9 o@@4))
)))
 :pattern ( (|Set#Equal| a@@12 b@@9))
)))
(assert (forall ((d@@10 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Expr.If_q d@@10) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.Expr $h@@2))) ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@10) Tclass._module.Expr $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.cond d@@10) Tclass._module.Expr $h@@2))
)))
(assert (forall ((d@@11 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Expr.If_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Expr $h@@3))) ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@11) Tclass._module.Expr $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.thn d@@11) Tclass._module.Expr $h@@3))
)))
(assert (forall ((d@@12 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Expr.If_q d@@12) ($IsAlloc DatatypeTypeType d@@12 Tclass._module.Expr $h@@4))) ($IsAlloc DatatypeTypeType (_module.Expr.els d@@12) Tclass._module.Expr $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expr.els d@@12) Tclass._module.Expr $h@@4))
)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))) (Lit DatatypeTypeType (|#_module.Expr.Const| (U_2_bool |a#3#0#0|))))
 :pattern ( (|#_module.Expr.Const| (U_2_bool (Lit boolType |a#3#0#0|))))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)) (Lit DatatypeTypeType (|#_module.Expr.Var| |a#8#0#0|)))
 :pattern ( (|#_module.Expr.Var| (Lit SeqType |a#8#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@2)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc charType v@@5 TChar h@@3)
 :pattern ( ($IsAlloc charType v@@5 TChar h@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((s@@1 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@2))))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is charType v@@8 TChar)
 :pattern ( ($Is charType v@@8 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |g#0@@5| () T@U)
(declare-fun |a#0@@5| () T@U)
(declare-fun |b#0@@5| () T@U)
(declare-fun |x#0@@5| () T@U)
(declare-fun |y#0@@5| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |##e#1_1_1@0| () T@U)
(declare-fun |##e#1_1_2@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun |##e#1_2_0@0| () T@U)
(declare-fun |a##1_2_0@0| () T@U)
(declare-fun |b##1_2_0@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |##e#1_2_2@0| () T@U)
(declare-fun |##e#1_2_3@0| () T@U)
(declare-fun |##e#1_3_0@0| () T@U)
(declare-fun |##e#1_3_1@0| () T@U)
(declare-fun |##e#0_0_0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |##e#0_1_0@0| () T@U)
(declare-fun |g##0_1_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##e#0_1_1@0| () T@U)
(declare-fun |##e#0_2_0@0| () T@U)
(declare-fun |##e#0_2_1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 0)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 22) (let ((GeneratedUnifiedExit_correct  (=> (and (and (and (|_module.__default.UnnestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (|_module.__default.FVs#canCall| (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (= (ControlFlow 0 18) (- 0 17))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))))))
(let ((anon20_Else_correct  (=> (and (and (and (|_module.__default.UnnestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (|_module.__default.FVs#canCall| (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (and (|Set#Equal| (_module.__default.FVs ($LS $LZ) (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |g#0@@5|) (_module.__default.FVs ($LS $LZ) |a#0@@5|)) (_module.__default.FVs ($LS $LZ) |b#0@@5|)) (_module.__default.FVs ($LS $LZ) |x#0@@5|)) (_module.__default.FVs ($LS $LZ) |y#0@@5|))) (= (ControlFlow 0 19) 18))) GeneratedUnifiedExit_correct)))
(let ((anon20_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |g#0@@5|)) (=> (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |a#0@@5|)) (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |x#0@@5|))) (=> (and (and (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |y#0@@5|)) (and ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |b#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |y#0@@5|)))) (=> (and (and (and (and (and (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |g#0@@5|))) (and (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |a#0@@5|)) (and ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |b#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |y#0@@5|))))) (and (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (= (ControlFlow 0 16) (- 0 15)))) (|Set#Equal| (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)))))))))
(let ((anon19_Then_correct  (=> (and (and (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |g#0@@5|)) (and (= |##e#1_1_1@0| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) ($IsAlloc DatatypeTypeType |##e#1_1_1@0| Tclass._module.Expr $Heap@0))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) (= |##e#1_1_2@0| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsAlloc DatatypeTypeType |##e#1_1_2@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))))) (=> (and (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|))) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4))) (and (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) (and (and (|_module.__default.FVs#canCall| |a#0@@5|) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (and (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))) (= $Heap@0 $Heap@4))) (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|)) (and (and (|_module.__default.FVs#canCall| |b#0@@5|) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)))))) (and (and (and (and (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))) (= $Heap@4 $Heap@5)) (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |g#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |a#0@@5|)) (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |x#0@@5|)))) (and (and (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |y#0@@5|)) (and ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |b#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@5) (|_module.__default.FVs#canCall| |y#0@@5|)))))) (=> (and (and (and (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (= (ControlFlow 0 14) (- 0 13))) (|Set#Equal| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|))) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))))))))
(let ((anon18_Then_correct  (=> (and (and (= |##e#1_2_0@0| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) ($IsAlloc DatatypeTypeType |##e#1_2_0@0| Tclass._module.Expr $Heap@0)) (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))))) (=> (and (and (and (= |a##1_2_0@0| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) (= |b##1_2_0@0| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a##1_2_0@0| |b##1_2_0@0|)) (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a##1_2_0@0|)) (|_module.__default.FVs#canCall| |b##1_2_0@0|))) (and (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| |a##1_2_0@0| |b##1_2_0@0|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a##1_2_0@0|)) (_module.__default.FVs ($LS ($LS $LZ)) |b##1_2_0@0|))) (= $Heap@0 $Heap@3)))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@3) (|_module.__default.FVs#canCall| |g#0@@5|)) (and (= |##e#1_2_2@0| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) ($IsAlloc DatatypeTypeType |##e#1_2_2@0| Tclass._module.Expr $Heap@3))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|)) (= |##e#1_2_3@0| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsAlloc DatatypeTypeType |##e#1_2_3@0| Tclass._module.Expr $Heap@3) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))))) (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|))) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (= (ControlFlow 0 12) (- 0 11)))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|))) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|)))))))))
(let ((anon17_Then_correct  (=> ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@0) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@0) ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@0)) (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0))) (and (and (|_module.__default.UnnestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (= |##e#1_3_0@0| (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsAlloc DatatypeTypeType |##e#1_3_0@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))))) (and (and (and (|_module.__default.UnnestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (|_module.__default.FVs#canCall| (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (= |##e#1_3_1@0| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|)))) (and (and ($IsAlloc DatatypeTypeType |##e#1_3_1@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|)))) (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))) (= (ControlFlow 0 10) (- 0 9)))))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (_module.__default.UnnestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| (|#_module.Expr.If| |a#0@@5| |x#0@@5| |y#0@@5|) (|#_module.Expr.If| |b#0@@5| |x#0@@5| |y#0@@5|))))))))
(let ((anon16_Then_correct true))
(let ((anon15_Else_correct  (=> (and (and (and (|_module.__default.NestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (|_module.__default.FVs#canCall| (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (|Set#Equal| (_module.__default.FVs ($LS $LZ) (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |g#0@@5|) (_module.__default.FVs ($LS $LZ) |a#0@@5|)) (_module.__default.FVs ($LS $LZ) |b#0@@5|)) (_module.__default.FVs ($LS $LZ) |x#0@@5|)) (_module.__default.FVs ($LS $LZ) |y#0@@5|)))) (and (and (and (and (and (=> (= (ControlFlow 0 20) 8) anon16_Then_correct) (=> (= (ControlFlow 0 20) 10) anon17_Then_correct)) (=> (= (ControlFlow 0 20) 12) anon18_Then_correct)) (=> (= (ControlFlow 0 20) 14) anon19_Then_correct)) (=> (= (ControlFlow 0 20) 16) anon20_Then_correct)) (=> (= (ControlFlow 0 20) 19) anon20_Else_correct)))))
(let ((anon15_Then_correct  (=> (= |##e#0_0_0@0| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (=> (and ($IsAlloc DatatypeTypeType |##e#0_0_0@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|))) (=> (and (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| |y#0@@5|))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (=> (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)))) (and (and (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|))) (= $Heap@0 $Heap@2)) (and ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@2) (|_module.__default.FVs#canCall| |g#0@@5|)))) (and (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@2) (|_module.__default.FVs#canCall| |a#0@@5|)) (and ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@2) (|_module.__default.FVs#canCall| |b#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@2) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@2) (|_module.__default.FVs#canCall| |y#0@@5|))))) (=> (and (and (and (and (and (|_module.__default.FVs#canCall| |g#0@@5|) (|_module.__default.FVs#canCall| |a#0@@5|)) (|_module.__default.FVs#canCall| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (= (ControlFlow 0 7) (- 0 6))) (|Set#Equal| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g#0@@5|) (_module.__default.FVs ($LS ($LS $LZ)) |a#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))))))))))
(let ((anon14_Then_correct  (=> (= |##e#0_1_0@0| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|)) (=> (and ($IsAlloc DatatypeTypeType |##e#0_1_0@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|))) (=> (and (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|)) (= |g##0_1_0@0| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g##0_1_0@0| |x#0@@5| |y#0@@5|)) (and (and (|_module.__default.FVs#canCall| |g##0_1_0@0|) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g##0_1_0@0| |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) |g##0_1_0@0|) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|))))) (=> (and (and (and (and (= $Heap@0 $Heap@1) (= |##e#0_1_1@0| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|))) (and ($IsAlloc DatatypeTypeType |##e#0_1_1@0| Tclass._module.Expr $Heap@1) (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)))) (and (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@1) (|_module.__default.FVs#canCall| |x#0@@5|)) (and ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@1) (|_module.__default.FVs#canCall| |y#0@@5|)))) (and (and (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (|_module.__default.FVs#canCall| |x#0@@5|)) (|_module.__default.FVs#canCall| |y#0@@5|)) (= (ControlFlow 0 5) (- 0 4)))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|)) (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |x#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) |y#0@@5|)))))))))
(let ((anon13_Then_correct  (=> ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap@0) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap@0) ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap@0)) (and ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap@0) ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap@0))) (and (and (|_module.__default.NestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (= |##e#0_2_0@0| (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (and ($IsAlloc DatatypeTypeType |##e#0_2_0@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))))) (and (and (and (|_module.__default.NestedIf#canCall| |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|) (|_module.__default.FVs#canCall| (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|))) (= |##e#0_2_1@0| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|))) (and (and ($IsAlloc DatatypeTypeType |##e#0_2_1@0| Tclass._module.Expr $Heap@0) (|_module.__default.FVs#canCall| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|))) (and (|_module.__default.FVs#canCall| (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|)) (= (ControlFlow 0 3) (- 0 2)))))) (|Set#Equal| (_module.__default.FVs ($LS ($LS $LZ)) (_module.__default.NestedIf |g#0@@5| |a#0@@5| |b#0@@5| |x#0@@5| |y#0@@5|)) (_module.__default.FVs ($LS ($LS $LZ)) (|#_module.Expr.If| (|#_module.Expr.If| |g#0@@5| |a#0@@5| |b#0@@5|) |x#0@@5| |y#0@@5|)))))))
(let ((anon12_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (|$IsA#_module.Expr| |g#0@@5|)) (=> (and (and (and (|$IsA#_module.Expr| |a#0@@5|) (|$IsA#_module.Expr| |b#0@@5|)) (and (|$IsA#_module.Expr| |x#0@@5|) (|$IsA#_module.Expr| |y#0@@5|))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#g0#0| T@U) (|$ih#a0#0| T@U) (|$ih#b0#0| T@U) (|$ih#x0#0| T@U) (|$ih#y0#0| T@U) ) (!  (=> (and (and (and (and (and (and ($Is DatatypeTypeType |$ih#g0#0| Tclass._module.Expr) ($Is DatatypeTypeType |$ih#a0#0| Tclass._module.Expr)) ($Is DatatypeTypeType |$ih#b0#0| Tclass._module.Expr)) ($Is DatatypeTypeType |$ih#x0#0| Tclass._module.Expr)) ($Is DatatypeTypeType |$ih#y0#0| Tclass._module.Expr)) (U_2_bool (Lit boolType (bool_2_U true)))) (or (< (DtRank |$ih#g0#0|) (DtRank |g#0@@5|)) (and (= (DtRank |$ih#g0#0|) (DtRank |g#0@@5|)) (or (< (DtRank |$ih#a0#0|) (DtRank |a#0@@5|)) (and (= (DtRank |$ih#a0#0|) (DtRank |a#0@@5|)) (or (< (DtRank |$ih#b0#0|) (DtRank |b#0@@5|)) (and (= (DtRank |$ih#b0#0|) (DtRank |b#0@@5|)) (or (< (DtRank |$ih#x0#0|) (DtRank |x#0@@5|)) (and (= (DtRank |$ih#x0#0|) (DtRank |x#0@@5|)) (< (DtRank |$ih#y0#0|) (DtRank |y#0@@5|))))))))))) (and (and (and (|_module.__default.UnnestedIf#canCall| |$ih#g0#0| |$ih#a0#0| |$ih#b0#0| |$ih#x0#0| |$ih#y0#0|) (|_module.__default.FVs#canCall| (_module.__default.UnnestedIf |$ih#g0#0| |$ih#a0#0| |$ih#b0#0| |$ih#x0#0| |$ih#y0#0|))) (and (and (and (and (|_module.__default.FVs#canCall| |$ih#g0#0|) (|_module.__default.FVs#canCall| |$ih#a0#0|)) (|_module.__default.FVs#canCall| |$ih#b0#0|)) (|_module.__default.FVs#canCall| |$ih#x0#0|)) (|_module.__default.FVs#canCall| |$ih#y0#0|))) (|Set#Equal| (_module.__default.FVs ($LS $LZ) (_module.__default.UnnestedIf |$ih#g0#0| |$ih#a0#0| |$ih#b0#0| |$ih#x0#0| |$ih#y0#0|)) (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |$ih#g0#0|) (_module.__default.FVs ($LS $LZ) |$ih#a0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#b0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#x0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#y0#0|)))))
 :pattern ( (|Set#Union| (|Set#Union| (|Set#Union| (|Set#Union| (_module.__default.FVs ($LS $LZ) |$ih#g0#0|) (_module.__default.FVs ($LS $LZ) |$ih#a0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#b0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#x0#0|)) (_module.__default.FVs ($LS $LZ) |$ih#y0#0|)))
 :pattern ( (_module.__default.UnnestedIf |$ih#g0#0| |$ih#a0#0| |$ih#b0#0| |$ih#x0#0| |$ih#y0#0|))
))))) (and (and (and (and (=> (= (ControlFlow 0 21) 1) anon12_Then_correct) (=> (= (ControlFlow 0 21) 3) anon13_Then_correct)) (=> (= (ControlFlow 0 21) 5) anon14_Then_correct)) (=> (= (ControlFlow 0 21) 7) anon15_Then_correct)) (=> (= (ControlFlow 0 21) 20) anon15_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |g#0@@5| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |g#0@@5| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |g#0@@5|)) (and (and ($Is DatatypeTypeType |a#0@@5| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |a#0@@5| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |a#0@@5|))) (=> (and (and (and (and ($Is DatatypeTypeType |b#0@@5| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |b#0@@5| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |b#0@@5|)) (and (and ($Is DatatypeTypeType |x#0@@5| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |x#0@@5| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |x#0@@5|))) (and (and (and ($Is DatatypeTypeType |y#0@@5| Tclass._module.Expr) ($IsAlloc DatatypeTypeType |y#0@@5| Tclass._module.Expr $Heap)) (|$IsA#_module.Expr| |y#0@@5|)) (= (ControlFlow 0 22) 21))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
