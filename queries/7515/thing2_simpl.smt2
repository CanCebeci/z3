(declare-sort value 0)
(declare-sort node 0)
(declare-sort quorum 0)
(declare-fun |$decided[0]| (node value) Bool)
(declare-fun |__fml:n[0]| () node)
(declare-fun |$1[0]| () Bool)
(declare-fun member (node quorum) Bool)
(declare-fun |__fml:q[0]| () quorum)
(declare-fun |$votes[0]| (node node) Bool)
(declare-fun |__fml:sn[0]| () node)
(declare-fun |$2[0]| () Bool)
(declare-fun |__sk__Q[0]| () quorum)
(declare-fun |$3[0]| () Bool)
(declare-fun |voting_quorum[0]| () quorum)
(declare-fun |$4[0]| () Bool)
(declare-fun |$leader[0]| (node) Bool)
(declare-fun |$vote_msg[0]| (node node) Bool)
(declare-fun |$voted[0]| (node) Bool)
(declare-fun |$vote_request_msg[0]| (node node) Bool)
(declare-fun |$vote_request_msg[1]| (node node) Bool)
(declare-fun |__fml:dst[0]| () node)
(declare-fun |__fml:src[0]| () node)
(declare-fun |B[1]| () node)
(declare-fun |A[1]| () node)
(declare-fun |K[1]| () quorum)
(assert (forall ((|Q1:quorum| quorum) (|Q2:quorum| quorum))
  (exists ((|N:node| node))
    (and (member |N:node| |Q1:quorum|) (member |N:node| |Q2:quorum|)))))
; (assert (let ((a!1 (exists ((|B[1]| node) (|__fml:n[0]| node))
;              (let ((a!1 (forall ((|N:node| node))
;                           (or (|$votes[0]| |__fml:n[0]| |N:node|)
;                               (not (member |N:node| |voting_quorum[0]|))))))
;                (and a!1 (|$leader[0]| |B[1]|) (not (= |B[1]| |__fml:n[0]|)))))))
;   (not a!1)))
; (assert (let ((a!1 (exists ((|__fml:n[0]| node) (|__fml:v[0]| value) (|F[0]| value))
;              (and (|$decided[0]| |__fml:n[0]| |__fml:v[0]|)
;                   (|$decided[0]| |__fml:n[0]| |F[0]|)
;                   (not (= |__fml:v[0]| |F[0]|))))))
;   (not a!1)))
; (assert (let ((a!1 (exists ((|__fml:n[0]| node) (|__fml:v[0]| value))
;              (and (|$decided[0]| |__fml:n[0]| |__fml:v[0]|)
;                   (not (|$leader[0]| |__fml:n[0]|))))))
;   (not a!1)))
; (assert (let ((a!1 (exists ((|__fml:q[0]| quorum) (|A[1]| node) (|B[1]| node))
;              (let ((a!1 (forall ((|N:node| node))
;                           (or (|$votes[0]| |B[1]| |N:node|)
;                               (not (member |N:node| |__fml:q[0]|))))))
;                (and (|$leader[0]| |A[1]|) a!1 (not (= |A[1]| |B[1]|)))))))
;   (not a!1)))
(assert (let ((a!1 (exists ((|A[1]| node) (|K[1]| quorum) (|__fml:dst[0]| node))
             (let ((a!1 (forall ((|N:node| node))
                          (or (and (|$vote_request_msg[0]|
                                     |__fml:dst[0]|
                                     |N:node|)
                                   (not (|$voted[0]| |N:node|)))
                              (|$vote_msg[0]| |N:node| |__fml:dst[0]|)
                              (|$votes[0]| |__fml:dst[0]| |N:node|)
                              (not (member |N:node| |K[1]|))))))
               (and (|$leader[0]| |A[1]|) a!1 (not (= |A[1]| |__fml:dst[0]|)))))))
  (not a!1)))
(assert (let ((a!1 (exists ((|B[1]| node) (|__fml:n[0]| node))
             (and (|$leader[0]| |__fml:n[0]|)
                  (not (= |__fml:n[0]| |B[1]|))
                  (|$leader[0]| |B[1]|)))))
  (not a!1)))
; (assert (let ((a!1 (exists ((|__fml:n[0]| node) (|__fml:sender[0]| node))
;              (and (|$votes[0]| |__fml:n[0]| |__fml:sender[0]|)
;                   (not (|$vote_msg[0]| |__fml:sender[0]| |__fml:n[0]|))))))
;   (not a!1)))
; (assert (let ((a!1 (exists ((|A[1]| node) (|__fml:n[0]| node) (|F[1]| value))
;              (and (not (= |A[1]| |__fml:n[0]|))
;                   (|$leader[0]| |__fml:n[0]|)
;                   (|$decided[0]| |A[1]| |F[1]|)))))
;   (not a!1)))
; (assert (let ((a!1 (exists ((|__fml:src[0]| node) (|__fml:dst[0]| node) (|A[0]| node))
;              (and (|$vote_msg[0]| |__fml:src[0]| |__fml:dst[0]|)
;                   (|$vote_msg[0]| |__fml:src[0]| |A[0]|)
;                   (not (= |__fml:dst[0]| |A[0]|))))))
;   (not a!1)))

; (assert (let ((a!1 (exists ((|A[1]| node) (|K[1]| quorum) (|__fml:n[0]| node))
;              (let ((a!1 (forall ((|N:node| node))
;                           (or (|$vote_msg[0]| |N:node| |__fml:n[0]|)
;                               (|$votes[0]| |__fml:n[0]| |N:node|)
;                               (not (member |N:node| |K[1]|))))))
;                (and (|$leader[0]| |A[1]|) a!1 (not (= |A[1]| |__fml:n[0]|)))))))
;   (not a!1)))

; (assert (let ((a!1 (exists ((|__fml:src[0]| node) (|__fml:dst[0]| node))
;              (and (|$vote_msg[0]| |__fml:src[0]| |__fml:dst[0]|)
;                   (not (|$voted[0]| |__fml:src[0]|))))))
;   (not a!1)))
(assert (let ((a!1 (exists ((|A[1]| node) (|K[1]| quorum) (|__fml:src[0]| node))
             (let ((a!1 (forall ((|N:node| node))
                          (or (and (or true
                                       (|$vote_request_msg[0]|
                                         |__fml:src[0]|
                                         |N:node|))
                                   (not (|$voted[0]| |N:node|)))
                              (|$vote_msg[0]| |N:node| |__fml:src[0]|)
                              (|$votes[0]| |__fml:src[0]| |N:node|)
                              (not (member |N:node| |K[1]|))))))
               (and (|$leader[0]| |A[1]|) a!1 (not (= |A[1]| |__fml:src[0]|)))))))
  (not a!1)))
; (assert (forall ((|V1:value| value)
;          (|V2:value| value)
;          (|N1:node| node)
;          (|N2:node| node))
;   (=> (and (|$decided[0]| |N1:node| |V1:value|)
;            (|$decided[0]| |N2:node| |V2:value|))
;       (= |V1:value| |V2:value|))))

; commenting this makes query stable
(assert (let ((a!1 (forall ((|A[0]| node) (|B[0]| node))
             (=> (not (and (= |A[0]| |__fml:src[0]|) (= |B[0]| |__fml:dst[0]|)))
                 (= (|$vote_request_msg[1]| |A[0]| |B[0]|)
                    (|$vote_request_msg[0]| |A[0]| |B[0]|))))))
  (and (|$vote_request_msg[1]| |__fml:src[0]| |__fml:dst[0]|) a!1)))
(assert (let ((a!1 (forall ((|N:node| node))
             (or (and (|$vote_request_msg[1]| |B[1]| |N:node|)
                      (not (|$voted[0]| |N:node|)))
                 (|$vote_msg[0]| |N:node| |B[1]|)
                 (|$votes[0]| |B[1]| |N:node|)
                 (not (member |N:node| |K[1]|))))))
  (and (|$leader[0]| |A[1]|) a!1 (not (= |A[1]| |B[1]|)))))
(check-sat)
